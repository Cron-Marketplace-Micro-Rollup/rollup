import {
  ActionSchema,
  FIFOStrategy,
  MicroRollup,
  ConfirmationEvents,
} from "@stackr/stackr-js";
import bodyParser from "body-parser";
import express, { Request, Response } from "express";
import { stackrConfig } from "../stackr.config";
import { CronRollup, StateVariable, cronSTF } from "./state";
import { ethers } from "ethers";
import abi from "../abi.json";
import { StateMachine } from "@stackr/stackr-js/execution";

// this file is generated by the deployment script
import * as genesisState from "../genesis-state.json";
import actionSchemaType from "./action-schema-type";

/*
AAYUSH CODE START
*/

const rpcUrl = "https://goerli.base.org";
const provider = new ethers.JsonRpcProvider(rpcUrl);
const contractAddress = "<BRIDGE_CONTRACT_ADDRESS>";
const myContract = new ethers.Contract(contractAddress, abi.abi, provider);

const wallet = new ethers.Wallet(
  "<BRIDGE_SIGNER>",
  provider
);

/*
AAYUSH CODE END
*/

const rollup = async () => {
  const counterFsm = new StateMachine({
    state: new CronRollup(genesisState.state as StateVariable),
    stf: cronSTF,
  });

  const actionInput = new ActionSchema("cron-actions", actionSchemaType);

  const buildStrategy = new FIFOStrategy();

  const { state, actions, events } = await MicroRollup({
    config: stackrConfig,
    useState: counterFsm,
    useAction: actionInput,
    useBuilder: { strategy: buildStrategy, autorun: true },
    useSyncer: { autorun: true },
  });

  // events.action.onEvent(ActionEvents.SUBMIT_ACTION, (action) => {
  //   console.log("action submitted", action);
  // });

  // events.batcher.onEvent(BatcherEvents.BATCH_ACTION, (batch) => {
  //   console.log("action batched", batch);
  // });

  // events.builder.onEvent(BuilderEvents.ORDER_BATCH, (batch) => {
  //   console.log("action batch ordered", batch);
  // });

  return { state, actions, events };
};

const app = express();
app.use(bodyParser.json());
const { actions, state, events } = await rollup();

app.get("/", (req: Request, res: Response) => {
  res.send({ rollupState: state.get().state.getState() });
});

app.post("/", async (req: Request, res: Response) => {
  const schema = actions.getSchema("cron-actions");

  if (!schema) {
    res.status(400).send({ message: "error" });
    return;
  }

  let acks = [];
  for (let request of req.body) {
    // console.log("--- Processing ----");
    // console.log(request);
    // console.log("---------------------");
    // if (request.payload.type === "finishJob") {
    //   let jobs = state.get().state.getState().jobs;
    //   console.log("Mark the following as finished");
    //   console.log(
    //     jobs[
    //       jobs.findIndex((j) => j.id === request.payload.jobActionsParams.jobId)
    //     ]
    //   );
    //   // console.log(jobs);
    //   console.log("-------------------------");
    // }
    try {
      request.payload = {
        ...request.payload,
        currentTimestamp: new Date().getTime().toString(),
      };

      const newAction = schema.newAction(request);
      const ack = await actions.submit(newAction);
      acks.push(ack);
    } catch (e: any) {
      // res.status(400).send({ error: e.message });
      console.log(e);
      break;
    }
  }

  res.status(201).send({ acks });
});

/*
AAYUSH CODE START
*/

app.post("/burn", async (req: Request, res: Response) => {
  const schema = actions.getSchema("cron-actions");
  if (!schema) {
    res.status(400).send({ message: "error" });
    return;
  }

  try {
    const newAction = schema.newAction(req.body);
    const ack = await actions.submit(newAction);

    events.confirmation.onEvent(
      ConfirmationEvents.C3_CONFIRMATION,
      async (data) => {
        console.log("C3 Confirmation Event Detected");
        const amountInWei = BigInt(req.body.payload.creditActionsParams.amount);
        const myContract = new ethers.Contract(
          contractAddress,
          abi.abi,
          wallet
        );
        const tx = await myContract.unlock(
          req.body.payload.creditActionsParams.to,
          amountInWei
        );
        console.log(tx);
        await tx.wait();
      }
    );

    res.status(201).send({ ack: ack });
  } catch (e: any) {
    res.status(400).send({ error: e.message });
  }
});

/*
AAYUSH CODE END
*/

app.listen(3000, () => {
  console.log("listening on port 3000");
});

/*
AAYUSH CODE START
*/

try {
  myContract.on("Locked", async (user, amount, event) => {
    console.log(`Locked Event Detected`);
    console.log(`User: ${user}`);
    console.log(`Amount: ${amount.toString()}`);
    await mint(amount.toString(), user);
  });
} catch (err) {
  console.log(err);
}

const mint = async (amount: string, address: string) => {
  const actionInput = new ActionSchema("cron-actions", actionSchemaType);
  const schema = actions.getSchema("cron-actions");

  const data = {
    type: "mint",
    sender: wallet.address,
    jobActionsParams: {
      jobId: 0,
      reward: "10000",
      chain: "base",
      contract: "0xcontract",
      function: "function",
      triggerStart: "timestamp",
      triggerEnd: "timestamp",
      txHash: "0x...",
    },
    creditActionsParams: {
      from: wallet.address,
      to: address,
      amount: amount,
    },
  };

  const sign = await wallet.signTypedData(
    stackrConfig.domain,
    actionInput.EIP712TypedData.types,
    data
  );
  console.log(actionInput.EIP712TypedData.types);

  const payload = {
    msgSender: wallet.address,
    signature: sign,
    payload: data,
  };

  console.log(payload);

  if (!schema) {
    console.log("No schema");
    return;
  }

  try {
    const newAction = schema.newAction(payload);
    const ack = await actions.submit(newAction);
    console.log(ack);
  } catch (e: any) {
    console.log("error");
  }
};

/*
AAYUSH CODE END
*/
